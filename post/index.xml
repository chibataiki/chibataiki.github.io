<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jian&#39;s Life</title>
    <link>http://example.org/post/</link>
    <description>Recent content in Posts on Jian&#39;s Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2020 14:03:02 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QEMU系统模式仿真嵌入式设备</title>
      <link>http://example.org/post/qemu_emulator_env/</link>
      <pubDate>Thu, 27 Feb 2020 14:03:02 +0800</pubDate>
      
      <guid>http://example.org/post/qemu_emulator_env/</guid>
      <description>主要是对MIPS ARM架构的嵌入式设备进行仿真
系统仿真在大多数时候并不是一种很好的选择,因为不能保证完美的仿真硬件
0x00 QEMU 系统模式的仿真方式 系统模式下的引导需要提供内核,文件系统,文件系统使用binwalk等工具可以相对方便的获取, 但是内核比较麻烦. 所以大致有三种系统仿真方式
1.从设备中提取内核,并将提取出的文件系统制作成镜像,从镜像中启动. 这种方式最接近物理设备但是内核的提取不容易,是否能成功启动也另说.
2.使用一个同架构(MIPS,ARM)预编译的内核,使用固件提取的文件做成镜像进行启动. 相对容易,但是让仿真成功进行也比较麻烦.
3.使用一个同架构(MIPS,ARM)预编译的内核,以及预编译的系统镜像. 在系统成功启动后,将固件提取的文件系统拷贝到虚拟机中,使用 chroot 进行允许. 虽然不够贴近物理设备但是比较容易实现
这里选择第3种.
0x01 安装qemu sudo apt-get install qemu-system-mips qemu-system-mipsel qemu-system-arm -y
(这里需要说一下的就是,直接使用apt 安装的qemub版本是2.x,但是QEMU官网的版本已经是4.x, 里面一些manual 手册内容也发生了变化)
0x02下载预编译的kernel和系统文件镜像 下载链接: https://people.debian.org/~aurel32/qemu/
一些默认设置:
Root password: root
User account: user
User password: user
0x03启动qemu 最基础的命令:
qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append &amp;ldquo;root=/dev/sda1 console=ttyS0&amp;rdquo;
不想使用图形模式: -nographic
默认内存128 可以设置 -m 256M
[] TODO
ttyx 终端设备文件
ttysx 串口设备文件</description>
    </item>
    
    <item>
      <title>Vim配置问题</title>
      <link>http://example.org/post/vim%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 25 Feb 2020 00:23:10 +0800</pubDate>
      
      <guid>http://example.org/post/vim%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
      <description> 环境： macOS catalina vim: macvim
设置vim初始化环境 mkdir ~/.vim mv .vimrc ~/.vim/vimrc  vim的初始化环境在macOS上最初是～/.vimrc, 因为需要安装插件新建了.vim文件夹，所以想将.vimrc文件放入.vim目录下,这个时候需要重命名.vimrc为vimrc. 可以在:h viminfo 中查看 安装插件 这里使用的是vim-plug :https://github.com/junegunn/vim-plug
需要将
&amp;quot; Plugins will be downloaded under the specified directory. call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; List ends here. Plugins become visible to Vim after this call. call plug#end()  添加到vimrc中,然后vim下执行PlugInstall 就可以安装配置中的插件
安装markdown预览插件 https://github.com/iamcco/markdown-preview.nvim
在vimrc Plug区域添加
call plug#begin(&#39;~/.vim/plugged&#39;)  预览:
:MarkdownPreview :MarkdownPreviewStop  </description>
    </item>
    
    <item>
      <title>MacOS Catalina下IDA安装问题</title>
      <link>http://example.org/post/macos_catalina_ida%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 23 Feb 2020 18:28:03 +0800</pubDate>
      
      <guid>http://example.org/post/macos_catalina_ida%E5%AE%89%E8%A3%85/</guid>
      <description>macOS catalina下安装IDA报错&amp;rsquo;can&amp;rsquo;t be open&amp;rsquo;，进入ida包中运行&amp;rsquo;installbuilder.sh&amp;rsquo;报错显示&amp;rsquo;bad CPU type in executable:&amp;lsquo;，然后想到catalina已经不支持32位了，
解决方式： 在mojava下安装，copy到catalina中可以直接使用
https://github.com/swfangzhang/IDA-pro-7-for-Catalina-OSX-15 https://www.52pojie.cn/thread-1063122-1-1.html</description>
    </item>
    
    <item>
      <title>macOS下使用soundflower将音频输出转为输入</title>
      <link>http://example.org/post/macos_catalina%E9%9F%B3%E9%A2%91%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Sat, 22 Feb 2020 21:43:36 +0800</pubDate>
      
      <guid>http://example.org/post/macos_catalina%E9%9F%B3%E9%A2%91%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>因为有时候英文视频没有字幕，所以需要将视频的音频输出转为输入，这样可以借助一些翻译工具进行翻译。
工具： Soundflower
 安装 打开audio midi setup create Multi-Output Device，选中 Build-in Output 和SoundFlower(2ch), 此时，sound中的Output就多了Multi-Output Device 项 chrome 浏览器下，translate.google.com 地址栏右侧microphone 设置可以选择 Internal-Microphone(Build-in)，以及Soundflower(2ch),此时 谷歌页面输入的声音就是此时电脑输出的声音  </description>
    </item>
    
  </channel>
</rss>