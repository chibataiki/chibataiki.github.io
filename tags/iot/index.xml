<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>IoT on JiansLife</title>
    <link>https://chibataiki.github.io/tags/iot/</link>
    <description>Recent content in IoT on JiansLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Feb 2022 15:00:44 +0800</lastBuildDate><atom:link href="https://chibataiki.github.io/tags/iot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firmware emulation tools</title>
      <link>https://chibataiki.github.io/posts/firmware_emulation_tools/</link>
      <pubDate>Wed, 16 Feb 2022 15:00:44 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/firmware_emulation_tools/</guid>
      <description>Collect some firmware emulation tools. Add some more analysis later.
[TOC]
QEMU  user mode system mode  Firmadyne  https://github.com/firmadyne/firmadyne a research-paper project  FirmAE  https://github.com/pr0v3rbs/FirmAE  EMUX (formerly ARMX)  https://github.com/therealsaumil/emux  Firmware Analysis Toolkit  https://github.com/attify/firmware-analysis-toolkit  Qiling  https://github.com/qilingframework/qiling  unicorn  https://github.com/unicorn-engine/unicorn  basesafe  https://github.com/fgsect/BaseSAFE a research-paper project  FirmWire  https://github.com/FirmWire/FirmWire.git for smartphone baseband firmwares  usercore  https://github.com/lunixbochs/usercorn no more commits since 20 Mar 2019  binee  https://github.</description>
    </item>
    
    <item>
      <title>嵌入式设备文件系统分析工具</title>
      <link>https://chibataiki.github.io/posts/embedded_device_filesystem_analyze/</link>
      <pubDate>Tue, 07 Apr 2020 22:56:58 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/embedded_device_filesystem_analyze/</guid>
      <description>firmwalker https://github.com/craigz28/firmwalker
比较早的一个项目,bash编写,keywords patterns比较单薄
static-firmware-analysis https://github.com/secjey/static-firmware-analysis
灵感来自于firmwalker, 由python编写,比firmwalker多了一写匹配内容
trommel 参考了firmwalker,由python编写,相比来说最为完善
emba https://github.com/e-m-b-a/emba
简单看了下有挺多功能，比较有趣的是对 vulnerable function的检测，但是仅仅只是检测func的数量。</description>
    </item>
    
    <item>
      <title>Netgear-命令注入漏洞分析</title>
      <link>https://chibataiki.github.io/posts/netgear_command_injection_vule_analysis/</link>
      <pubDate>Wed, 04 Mar 2020 13:48:11 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/netgear_command_injection_vule_analysis/</guid>
      <description>netgear WNDR3700v4 存在命令注入漏洞,和认证绕过漏洞,相结合就可以未授权任意命令执行.
使用固件版本: V1.0.1.42
固件信息:
LZMA compressed data  Squashfs filesystem, little endian  ELF 32-bit MSB executable, MIPS, MIPS32 version 1 (SYSV)
使用LZMA进行压缩,文件系统为Squashfs, MIPS32,big-end,使用system V 接口
固件里一个/usr/sbin/net-cgi 程序里包含了很多功能,其中一个是 cmd_ping6(),如下:
反编译一下大概就是:
void cmd_ping6(char *target) { char cmd [132]; memset(cmd,0,0x80); sprintf(cmd,&amp;#34;ping6 -c 1 %s &amp;gt; /tmp/ping6_result 2&amp;gt;&amp;amp;1&amp;#34;,target); system(cmd); return; } 这里先将参数target格式化到命令字符串内,并存储在栈中 sprintf(target,&amp;quot;ping6 -c 1 %s &amp;gt; /tmp/ping6_result 2&amp;gt;&amp;amp;1&amp;quot;,target)
因为sprintf 不检验长度,所以存在缓冲区溢出
但是因为下面system函数直接调用了命令字符串,所以可以利用命令注入漏洞而不需要构造ROP链.
system()将参数给/bin/sh进行调用, 所以target设置为: ; evid_command &amp;amp;&amp;gt; /dev/null
那么执行完ping6 后,就会执行恶意命令.
那么就要看如何控制传入cmd_ping6 的参数.</description>
    </item>
    
    <item>
      <title>Dlink Backdoor 分析记录</title>
      <link>https://chibataiki.github.io/posts/dlink-backdoor-analysis/</link>
      <pubDate>Sun, 01 Mar 2020 12:38:39 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/dlink-backdoor-analysis/</guid>
      <description>受漏洞影响的是D-link 路由器的一些型号, 这些固件由D-link 子公司Alpha Networks公司开发.
只需要将浏览器User-Agent标志修改为：xmlset_roodkcableoj28840ybtide，再访问路由器IP地址，即可无需经过验证访问路由器的Web管理界面修改设备设置。
该后门在路由器的web服务中实现.
Craig Heffner 进行分析的时候,就首先将 /bin/webs 拖进IDA进行分析.
首先查看web server 的型号: thttpd-alphanetworks/2.23应该是thttpd的修改版本,而alphanetworks是D-link的子公司.
functions一栏里面很多alpha开头的函数,里面有个权限检查程序alpha_auth_check,可以分析一下.
通过交叉引用搜索发现 alpha_httpd_parse_request调用了alpha_auth_check :
alpha_httpd_parse_request调用部分:
loc_41A420: move $a0, $s2 la $t9, alpha_auth_check nop jalr $t9 ; alpha_auth_check nop lw $gp, 0x2830+var_2820($sp) li $v1, 0xFFFFFFFF beq $v0, $v1, loc_41A4B0 li $a0, 0xFFFFFFFF 分析一下参数: alpha_auth_check的传入参数$a0在$s2中,而 alpha_auth_check返回值存储在$v0中, 然后  $v0和$v1 (0xFFFFFFFF :-1)会进行比较, 相等就跳转到loc_41A4B0 结束函数.
 alpha_auth_check内:
存在strstr,strcmp 和以及一个明显的硬编码字符串
看一下strstr用法:
NAME strstr, strcasestr - locate a substring DESCRIPTION The strstr() function finds the first occurrence of the substring needle in the string haystack.</description>
    </item>
    
    <item>
      <title>MIPS/ARM 调试环境</title>
      <link>https://chibataiki.github.io/posts/dynamic-analysis-for-mips-arm/</link>
      <pubDate>Sat, 29 Feb 2020 10:47:10 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/dynamic-analysis-for-mips-arm/</guid>
      <description>环境
宿主机: ubuntu 18.04 x86_64 客户机: qemu运行的debian(wheey)
MIPS/ARM的程序调试方式:
 直接在宿主机上使用qemu 用户模式 在对应架构的debian虚拟机上运行,使用qemu-[mips/arm]-static的调试模式或者gdbserver都行  这里选择第二种
2.1. 客户机安装qemu-user-static
 apt-get install qemu-user-static  chroot . ./qemu-[arch]-static [-g port] [program]
2.2. 客户机安装 gdbserver
chroot . ./program gdbserver --attach pid 调试工具(宿主机):
 IDA debugger里设置一下就行 gdb-multiatch  set architecture mips target remote [ip]:[port] gdb可以使用pwngdb,pedagdb等插件
referer:</description>
    </item>
    
    <item>
      <title>QEMU system mode emulation</title>
      <link>https://chibataiki.github.io/posts/qemu-system-mode-setting/</link>
      <pubDate>Thu, 27 Feb 2020 14:03:02 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/qemu-system-mode-setting/</guid>
      <description>主要是对MIPS/ARM架构的嵌入式设备进行仿真
系统仿真在大多数时候并不是一种很好的选择,因为不能保证完美的仿真硬件
0x00 QEMU 系统模式的仿真方式 系统模式下的引导需要提供内核,文件系统,文件系统使用binwalk等工具可以相对方便的获取, 但是内核比较麻烦. 这里大致有三种系统仿真方式
1.从设备中提取内核,并将提取出的文件系统制作成镜像,从镜像中启动. 这种方式最接近物理设备但是内核的提取不容易,是否能成功启动也另说.
2.使用一个同架构(MIPS,ARM)预编译的内核,使用固件提取的文件做成镜像进行启动. 相对容易,但是让仿真成功进行也比较麻烦.
3.使用一个同架构(MIPS,ARM)预编译的内核,以及预编译的系统镜像. 在系统成功启动后,将固件提取的文件系统拷贝到虚拟机中,使用 chroot 进行允许. 虽然不够贴近物理设备但是比较容易实现
这里选择第3种.
0x01 安装qemu sudo apt-get install qemu-system-mips qemu-system-mipsel qemu-system-arm -y (这里需要说一下的就是,直接使用apt 安装的qemub版本是2.x,但是QEMU官网的版本已经是4.x, 里面一些manual 手册内容也发生了变化, 但是还有一种说法就是,最好不要自己编译QEMU,因为可能对某些支持不是很好)
0x02下载预编译的kernel和系统文件镜像 下载链接: https://people.debian.org/~aurel32/qemu/
一些默认设置:
Root password: root
User account: user
User password: user
0x03启动qemu 最基础的命令:
qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append &amp;quot;root=/dev/sda1 console=ttyS0&amp;quot;  不想使用图形模式: -nographic
默认内存128 可以设置 -m 256M
0x04 网络配置 qemu支持设置usr,tap,bridge,l2tp,socket等类型的网络
(! net 参数不提倡,QEMU建议使用netdev)</description>
    </item>
    
    <item>
      <title>Netcore-igdmptd-后门漏洞分析</title>
      <link>https://chibataiki.github.io/posts/netcore_igdmptd_backdoor_analysis/</link>
      <pubDate>Thu, 27 Feb 2020 13:53:04 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/netcore_igdmptd_backdoor_analysis/</guid>
      <description>磊科路由器中内置了一个IGDMPTD的程序, 在外网上打开UDP端口53413 并进行监听. 后门采用硬编码的密码,允许攻击者在路由器上执行任意代码.
知道了这些之后,进行分析
仿真:
使用qemu 系统模式作为测试环境
固件: https://github.com/rapid7/metasploit-framework/files/267284/vuln_squashfs-root.tar.gz
scp -P 22 vuln_squashfs-root.tar.gz root@[target_ip]:/root tar xvf vuln_squashfs-root.tar.gz cd squashfs-root chroot . ./bin/igdmpt  可以看到端口已经打开 使用poc可以发现确实存在漏洞 create_server 函数中
bind:
 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);` addr =[family][ip][port] = 0xa5d00002
0xd05a = 53413 :端口号
0x00 = 0 : ip , INADDR_ANY =0 ,监听所有地址
0x02 = 2 :sa_family = 2,即SOCK_DGRAM ,表示UDP连接
这里ip设置为监听所有地址,所以设备会被暴露在公网上,很危险.
/* Socket types. */ #define SOCK_STREAM	1	/* stream (connection) socket	*/ #define SOCK_DGRAM	2	/* datagram (conn.</description>
    </item>
    
    <item>
      <title>CNVD-2018-01084_D Link_DIR 645_reproduction</title>
      <link>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</link>
      <pubDate>Wed, 07 Mar 2018 16:36:34 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</guid>
      <description>环境:
 x64 架构kali 2 + qemu user mode mipsel 架构 debian  过程:
使用IDA 打开 cgibin，main函数里第一步是把argc[0]和各个cgi模块名进行cmp操作， 然后根据 cmp结果进入各个模块。
可以使用 -0 argv0 强制将目标的 argv[0] 设置为 argv0
cgi 脚本通常通过环境变量/标准输入 获取输入，为了单独运行CGI脚本， 需要构造 相对应的请求参数。
 # REQUEST_METHOD # cgibin_parse_request 中 获取以下参数:  CONTENT_TYPE CONTENT_LENGTH REQUEST_URL
CONTENT_LENGTH 基于POST 数据的长度
可以看到请求为GET和POST请求都需要经过认证。
然后从环境变量中获取三个参数: EVENT，ACTION，SERVICE
QEMU可以通过 -E 设置环境变量 -0 设置参数
chroot . ./qemu-mipsel-static -0 &amp;#34;service.cgi&amp;#34; -E REQUEST_METHOD=&amp;#34;POST&amp;#34; - E REQUEST_URI=&amp;#34;service.cgi\?EVENT=CHECKFW%26ls%26&amp;#34; -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&amp;#34;application/x-www-form- urlencoded&amp;#34; -E HTTP_COOKIE=&amp;#34;uid=123456&amp;#34; -E REMOTE_ADDR=&amp;#34;127.</description>
    </item>
    
    <item>
      <title>CVE-2017-17562_GoAhead_RCE_reproduce</title>
      <link>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</link>
      <pubDate>Wed, 20 Dec 2017 17:36:42 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</guid>
      <description>编译运行 GoAhead
最新版本4.0.0 已修复 ， git checkout 切换漏洞版本
发现者现实shodan上数量：
2017-12-20 shodan：
漏洞位于 cgi.c cgiHandler
for new process, the function will start by allocating an array point for envp argument. then initials with key-value pairs taken from HTTP request parameters. Finally, lancgCgi function is called ,forks and execve the cgi script. 对于新进程，该函数将从为 envp 参数分配数组点开始。然后使用从 HTTP 请求参数获取的键值对开头的缩写。最后，调用 lancgCgi 函数，并执行 cgi 脚本。cgiHandleri 函数仅过滤 REMOTE_HOST 和 HTTP_AUTHORIZATION，所有其他参数均受信任和传递。因此，攻击者可以控制新 CGI 脚本的任意环境变量.
Patch : back to the version 4 ➜ goahead-git git:(4f83a6a3) ✗ git checkout tags/v4.</description>
    </item>
    
    <item>
      <title>CVE-2017-18046_Dasan_H640X_rce_reproduction</title>
      <link>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</link>
      <pubDate>Wed, 20 Dec 2017 13:29:11 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</guid>
      <description>Dasan Networks H640X Unauthenticated Remote Code Execution
  Affected version:
H640GR-02 H640GV-03 H640GW-02 H640RW-02 H645G
  Firmware:
2.76-9999 2.76-1101 2.67-1070 2.45-1045
  从某个ftp服务器中找到了部分影响的固件，下载了 G_ONU_N_2.45- 1045.01.H640GW.x 进行进一步的分析。
Step 1. 尝试使用 firmadyne进行初步仿真，失败。
[ 1.092000] init/1: potentially unexpected fatal signal 4 ... [ 1.096000] Kernel panic - not syncing: Attempted to kill init! Step 2. 使用qemu的user mode
 cpio-root chroot . ./qemu-mips-static -g 1234 ./bin/busybox -i -d 10 &amp;gt; debug.log gdb-multiarch 进行远程调试时， 发现其中指向0x7c65180a ，然而查看进程的maps ， 0x7c65180a地址是在范围之外的。 Step 3.</description>
    </item>
    
    <item>
      <title>CVE-2017-9675_D Link DIR 605L_DoS_analysis</title>
      <link>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</link>
      <pubDate>Wed, 29 Nov 2017 15:36:26 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</guid>
      <description>Details
  Device: D-Link DIR-605L, Model B
  Vulnerable Firmware Versions: 2.08UIB01 and prior releases. Fixed in
2.08UIBETA01.
  Attack Vector: Unauthenticated HTTP GET request
  Impact: Denial of service
 CVE: CVE-2017-9675    Poc: curl http://192.168.1.1/common/
  选择固件版本: DIR-605L_REVB_FIRMWARE_206b01
根据固件中的boa 的字符串串信息可以获取到boa的版本为 0.94.14rc21
因为漏洞发⽣于 GET 请求，，那么猜测漏洞位于处理GET请求的函数，且为其 中处理⽬录的那些函数。且 末位为 / 分隔符，那么 修改或使⽤URL 字符串的那些函数可能存在漏洞。
漏洞成因:
execl(dirmaker, dirmaker, req-&amp;gt;pathname, req-&amp;gt;request_uri, (void *) NULL); 可能: dirmaker指针指向的⽂件在⽂件系统中并不存在 man execl 中 参数是 char * 类型的NULL指针，但是上⾯使用的是 void *类型的，</description>
    </item>
    
    <item>
      <title>CVE-2017-17215_HG532e_analysis</title>
      <link>https://chibataiki.github.io/posts/cve-2017-17215_hg532e_analysis/</link>
      <pubDate>Tue, 28 Nov 2017 11:16:23 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-17215_hg532e_analysis/</guid>
      <description>使⽤用firmadyne 仿真整个⽂件系统时， ⽆法进入到console 中，console 登陆有限制
仿真mips架构的debian系统， 将HG532e的⽂文件系统传到debian中，
checkpoint 中 https://research.checkpoint.com/good-zero-day-skiddie/ 提到漏洞存在于upup 服务中, 该路由器的UPnP服务中有⼀项为DeviceUpgrade，通过请求 /ctrlt/DeviceUpgrade_1 进行固件的升级
使⽤chroot 运行upnp ， 没有任何提示，查看端口也并没打开，
使用 strace(system call trace)进行跟踪，发现缺少⽂件
搜索一下，应该是依赖于 mic 二进制⽂文件
继续追溯可以发现 profile 中有mic
对mic ⼆进制进行 msgsvr 关键字搜索: 可以发现和上面strace 的报错信息对应起来。
运行 mic 时 ，会⽣成对应 /var/msgsvr 不过会进入 ATP cli 从⽽而导致⽆法执⾏其他命令， 不过我们可以通过新建个ssh session 执行 mic 绕过这个限制。
补充，bin/下的cli 是 ATP cli ， 运行mic时会执行cli?
现在回过头来可以发现， 打开37215的端口是⼆进制程序是 mic
使⽤用exploit上的poc进行尝试后，发现确实可以完成命令注入，但是并不是所有命令都能正确执行.
 ➜ Documents Serving HTTP on 0.0.0.0 port 8000 ... 192.168.1.108 - - [24/Jan/2018 09:17:42] &amp;#34;GET /a HTTP/1.</description>
    </item>
    
  </channel>
</rss>
