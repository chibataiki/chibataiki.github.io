<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>漏洞复现 on JiansLife</title>
    <link>https://chibataiki.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
    <description>Recent content in 漏洞复现 on JiansLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Mar 2018 15:26:36 +0800</lastBuildDate><atom:link href="https://chibataiki.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CNVD 2018 01084_D Link_DIR 645_reproduction</title>
      <link>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</link>
      <pubDate>Wed, 07 Mar 2018 15:26:36 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</guid>
      <description>环境:
 x64 架构kali + qemu user mode mipsel 架构 debian  过程:
使用IDA 打开 cgibin，main函数里第一步是把argc[0]和各个cgi模块名进行cmp操作， 然后根据 cmp结果进入各个模块。
可以使用 -0 argv0 强制将目标的 argv[0] 设置为 argv0
cgi 脚本通常通过环境变量/标准输入 获取输入，为了单独运行CGI脚本， 需要构造 相对应的请求参数。
 # REQUEST_METHOD # cgibin_parse_request 中 获取以下参数:  CONTENT_TYPE CONTENT_LENGTH REQUEST_URL
CONTENT_LENGTH 基于POST 数据的长度 所以使用 $LEN 进行表示
可以看到请求为GET和POST请求都需要经过认证。
然后从环境变量中获取三个参数: EVENT，ACTION，SERVICE
QEMU可以通过 -E 设置环境变量 -0 设置参数
chroot . ./qemu-mipsel-static -0 &amp;#34;service.cgi&amp;#34; -E REQUEST_METHOD=&amp;#34;POST&amp;#34; - E REQUEST_URI=&amp;#34;service.cgi\?EVENT=CHECKFW%26ls%26&amp;#34; -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&amp;#34;application/x-www-form- urlencoded&amp;#34; -E HTTP_COOKIE=&amp;#34;uid=123456&amp;#34; -E REMOTE_ADDR=&amp;#34;127.</description>
    </item>
    
    <item>
      <title>CVE-2017-17562_GoAhead_RCE_漏洞复现.md</title>
      <link>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</link>
      <pubDate>Wed, 20 Dec 2017 14:59:16 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</guid>
      <description>2017-12-20 shodan结果：  EXPLOITATION 任意环境变量的注入很初步，但是某些特殊的环境变量能导致修改动态链接器的控制流
 referer：
https://www.elttam.com.au/blog/goahead/ https://github.com/elttam/advisories/tree/master/CVE-2017-17562
GitHub - embedthis/goahead: GoAhead Web Server
https://www.exploit-db.com/exploits/43360/
https://www.anquanke.com/post/id/91318
https://www.anquanke.com/post/id/91454</description>
    </item>
    
    <item>
      <title>CVE 2017 18046_Dasan_H640X_rce_reproduction</title>
      <link>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</link>
      <pubDate>Thu, 07 Dec 2017 16:46:24 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</guid>
      <description>Dasan Networks H640X Unauthenticated Remote Code Execution
看了下，是web server lighttpd 中的login_action.html 中使用的是strcpy，没有检查输入长度导致的栈溢出， 从而引发的RCE。
  Affected version:
 H640GR-02 H640GV-03 H640GW-02 H640RW-02 H645G    Firmware:
 2.76-9999 2.76-1101 2.67-1070 2.45-1045    从某个ftp服务器中找到了部分影响的固件，下载了 G_ONU_N_2.45- 1045.01.H640GW.x 进行进一步的分析。
  Step 1. 尝试使用 firmadyne进行初步仿真，失败。
  [ 1.092000] init/1: potentially unexpected fatal signal 4 &amp;hellip;
  [ 1.096000] Kernel panic - not syncing: Attempted to kill init!
    Step 2.</description>
    </item>
    
    <item>
      <title>CVE 2017 9675_D Link DIR 605L_DoS_analysis</title>
      <link>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</link>
      <pubDate>Wed, 29 Nov 2017 10:27:00 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</guid>
      <description>Details
  Device: D-Link DIR-605L, Model B
  Vulnerable Firmware Versions: 2.08UIB01 and prior releases. Fixed in
2.08UIBETA01.
  Attack Vector: Unauthenticated HTTP GET request
  Impact: Denial of service
  CVE: CVE-2017-9675
Poc: curl http://192.168.1.1/common/
  请求 http://192.168.1.1/common/ ， 路由器器会发生重启
条件: ’/’ 为末位字符串串， Get 请求
根据这些条件可以得出漏漏洞洞位于 boa web server
选择固件版本: DIR-605L_REVB_FIRMWARE_206b01
根据固件中的boa 的字符串串信息可以获取到boa的版本为 0.94.14rc21
因为漏洞发⽣生于 GET 请求，那么猜测漏洞位于: 处理GET请求的函数，且为其中处理目录的那些函数。且末位为 / 分隔符，那么修改或使用URL 字符串的那些函数可能存在漏洞。
boa.conf:
漏洞成因:</description>
    </item>
    
  </channel>
</rss>
