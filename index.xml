<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JiansLife</title>
    <link>https://chibataiki.github.io/</link>
    <description>Recent content on JiansLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Feb 2022 15:00:44 +0800</lastBuildDate><atom:link href="https://chibataiki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firmware emulation tools</title>
      <link>https://chibataiki.github.io/posts/firmware_emulation_tools/</link>
      <pubDate>Wed, 16 Feb 2022 15:00:44 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/firmware_emulation_tools/</guid>
      <description>Collect some firmware emulation tools. Add some more analysis later.
[TOC]
QEMU  user mode system mode  Firmadyne  https://github.com/firmadyne/firmadyne a research-paper project  FirmAE  https://github.com/pr0v3rbs/FirmAE  EMUX (formerly ARMX)  https://github.com/therealsaumil/emux  Firmware Analysis Toolkit  https://github.com/attify/firmware-analysis-toolkit  Qiling  https://github.com/qilingframework/qiling  unicorn  https://github.com/unicorn-engine/unicorn  basesafe  https://github.com/fgsect/BaseSAFE a research-paper project  FirmWire  https://github.com/FirmWire/FirmWire.git for smartphone baseband firmwares  usercore  https://github.com/lunixbochs/usercorn no more commits since 20 Mar 2019  binee  https://github.</description>
    </item>
    
    <item>
      <title>SSD漏洞挖掘从入门到放弃</title>
      <link>https://chibataiki.github.io/posts/ssd%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</link>
      <pubDate>Fri, 21 Jan 2022 15:13:32 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/ssd%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</guid>
      <description>0x00 前研 参加了 “雷克沙杯”HL260s移动硬盘破解挑战赛，记录一下整个过程。
0x01 SSD 组成部分 包含存储芯片部分和USB-to-SATA 转接器两个部分。
存储芯片部分包含4片 longsys 128GB 存储，一共512GB
桥接器芯片正面，包含一个 SOP8的SPI-flash， 另一个芯片不清楚。
​	反面包含一颗 SATA-to-USB 桥接器芯片。
0x02 flash 固件 分析 提取后包含部分 USB descriptor 明文信息和加密固件
USB descriptor:
​	可以得出bridge controller 为 Initio INIC-3638
​	结合芯片信息 符合lexar 相关介绍，但是没有对应datasheet
​
剩下部分为加密固件
0x03 读取分区 使用lexar 原装的 usb-to-sata bridge，可以发现只能识别256GB的块区
usb 2-4.3: New USB device found, idVendor=21c4, idProduct=b061, bcdDevice= 3.06 usb 2-4.3: New USB device strings: Mfr=1, Product=2, SerialNumber=3 usb 2-4.3: Product: HL260S usb 2-4.</description>
    </item>
    
    <item>
      <title>Gdb Script</title>
      <link>https://chibataiki.github.io/posts/gdb-script/</link>
      <pubDate>Thu, 15 Apr 2021 19:11:58 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/gdb-script/</guid>
      <description>a sample example
set pagination off set logging file gdb.output set logging on break xxxx.c:[line number] commands silent p p p eod bt c end run set logging off quit run : gdb -x gdb_script -args [program] [program arguments]
reference:
https://sdimitro.github.io/post/scripting-gdb/
https://sourceware.org/gdb/current/onlinedocs/gdb/Break-Commands.html</description>
    </item>
    
    <item>
      <title>The Design of Metro Map</title>
      <link>https://chibataiki.github.io/posts/the-design-of-metro-map/</link>
      <pubDate>Sat, 22 Aug 2020 20:24:49 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/the-design-of-metro-map/</guid>
      <description>伦敦交通图的最初几个版本很复杂，包含了很多要素:
河流，公园，树木，道路等等，很精确但是要素过多。乘坐地铁的人们显然更加在意如何从一个地铁站到达另一个地铁站。
Harry Beck 设计的地铁图：
三种方向： 上下，左右，以及斜45度。将复杂的地图简化为清晰的几何。在协调一致和特殊要求直接找到了一个很好的平衡。也成为了现代地铁示意图的典范。
referer:
https://www.ted.com/talks/michael_bierut_the_genius_of_the_london_tube_map/transcript?language=en&amp;amp;referrer=playlist-small_thing_big_idea#t-67176
《设计，无处不在》</description>
    </item>
    
    <item>
      <title>FREAK</title>
      <link>https://chibataiki.github.io/posts/freak/</link>
      <pubDate>Thu, 16 Jul 2020 18:12:05 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/freak/</guid>
      <description>introduction FREAK:(Factoring RSA Export Keys ) 在SSL/TLS协议中存在一种漏洞,允许中间人将ciphersuite中的RSA强度降低为EXPORT-grade(出口级别).
早期由于二战的因素,许多国家出于国家安全因素的考虑,从而限制加密技术的出口;美国政府对出口的加密算法存在限制, 根据法律将出口的RSA密钥长度减少为512bits.而512bit的RSA密钥解密的代价很小,允许美国可以解密国外的加密通讯.
受漏洞影响的相关库:
 OpenSSL :CVE-2015-0204 1.0.1-1.0.1j, 1.0.0-1.0.0o,0.9.8-0.9.8zc BoringSSL: versions before Nov 10, 2014 are vulnerable &amp;hellip;  在 OpenSSL 库中，s3_clnt.c 文件中的 ssl3_get_key_exchange 函数允许客户端使用弱RSA密钥对。攻击者可拦截受影响的客户端与服务器之间的HTTPS连接，并强制其使用弱加密。
patch部分: https://github.com/openssl/openssl/commit/ce325c60c74b0fa784f5872404b722e120e5cab0
攻击流程  client在发送的client hello中使用标准的RSA加密请求 MITM 劫持client hello,并将cipher suite 更改为 export-grade RSA,比如TLS_RSA_EXPORT_WITH_RC4_MD5,并传给server server在ServerCertificate中发送2048bits的公钥，接受export级别的cipher suite,并临时生成512bit的RSA公钥, 通过发送ServerKeyExchange message通知client,并使用证书的密钥对公钥进行签名 client端接受消息,验证证书, 生成 premaster key并通过server端的公钥进行加密 mitm attacker需要将512bit的公钥进行因数分解获得临时私钥, mitm 此时可以从clientkeyexchange中解密出pre-master secret 成功解密后attacker可以明文查看所有信息  检测方式:
 服务端:
openssl s_client -connect [server ip] -cipher EXPORT 客户端 https://clienttest.</description>
    </item>
    
    <item>
      <title>Sslstrip Use Note</title>
      <link>https://chibataiki.github.io/posts/sslstrip-use-note/</link>
      <pubDate>Tue, 09 Jun 2020 09:16:47 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/sslstrip-use-note/</guid>
      <description>sslstrip is a MITM tool.
how it works People may not type https:// (http://) in the address bar.
offen encouter SSL with this two types:
 301/302 redirection click links with https://  sslstrip can watch http traffic and change all https links to http
arpspoof send ARP messages on LAN associate the attacker&amp;rsquo;s Mac address with the gateway ip, then all traffic will send too attacker&amp;rsquo;s machine
sudo arpspoof -i [interface] -t [target mac] -r [gataway mac] traffic redirect sudo iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 10000 referer:</description>
    </item>
    
    <item>
      <title>Mitmproxy Use Note</title>
      <link>https://chibataiki.github.io/posts/mitmproxy-use-note/</link>
      <pubDate>Mon, 08 Jun 2020 17:21:54 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/mitmproxy-use-note/</guid>
      <description>一般而言,直接看官方文档就能解决很多问题, 但是实际测试中还是踩了很多坑,所以记录一下
环境: ubuntu 20.04
安装 坑: pip安装存在问题, 需要pipx
how mitm works https://docs.mitmproxy.org/stable/concepts-howmitmproxyworks/
certificate 安装mitmproxy的时候会在 .mitmproxy中默认生产很多认证相关的文件. ubuntu需要手动信任一下
 放到/usr/share/ca-certificates目录下 sudo dpkg-reconfigure ca-certificates  流量转发 开启转发:
sysctl -w net.ipv4.ip_forward=1 sysctl -w net.ipv6.conf.all.forwarding=1 关闭 ICMP包的转发
sysctl -w net.ipv4.conf.all.send_redirects=0 流量转发存在很多形式: https://docs.mitmproxy.org/stable/concepts-modes/
这里讲一下 Transparent的相关问题
选择本地转发的话: 直接iptables 转发流量会遇到的一个问题就是循环转发 iptables -t nat -A OUTPUT -p tcp -dport 80 -j REDIRECT --to-port 8080 这里8080是mitmproxy的代理端口, 所有出去的流量都会转发到8080,但是mitmproxy也需要访问80端口.
所以一个解决方案是新建一个用户mitmproxyuser,让它执行mitmproxy, 然后iptables设置一下不要过滤用户:mitmproxyuser,就可以解决流量循环转发的问题
sudo useradd mitmproxyuser passwd mitmproxyuser iptables -t nat -A OUTPUT -p tcp -m owner !</description>
    </item>
    
    <item>
      <title>Ghidra Usage Note</title>
      <link>https://chibataiki.github.io/posts/ghidra-usage-note/</link>
      <pubDate>Mon, 01 Jun 2020 13:22:15 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/ghidra-usage-note/</guid>
      <description>Ghidra plugin for ida ghidra包含了一些用于IDA的插件: 位于 ${GHIDRA_DIR}/Extensions/IDAPro/Python/
mac下插件位置:  /Users/$USER/.idapro/plugins/
xml_exporter.py: 1.a plugin to export an IDA database as an XML file.
2.Place in the IDA plugins folder.
xml_loader.py 1.an IDA loader to build a new database using an XML file.
2.It loads the .bytes file and builds the IDA database using the contents of the XML file.
3.NOTE: Currently, the loader does not support importing memory overlays or Harvard architectures (e.</description>
    </item>
    
    <item>
      <title>IDA_usage_note</title>
      <link>https://chibataiki.github.io/posts/ida_usage_note/</link>
      <pubDate>Thu, 28 May 2020 10:30:54 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/ida_usage_note/</guid>
      <description>对于IDA不能识别的二进制文件, 可以选择作为binary file 进行加载.
需要:
 手动设置CPU架构 手动设置加载基址  一旦IDA加载了文件,那么首先做的就是在最开头按下c, 将其转为code.
IDA会将二进制文件的bytes转为code然后进行分析, 但是任然会存在很多没有解析的code.
自动分析binary file 从固件中找到对应的符号文件, 使用IDApython进行符号的修复
TODO referer:
http://www.devttys0.com/2011/07/reverse-engineering-vxworks-firmware-wrt54gv8/</description>
    </item>
    
    <item>
      <title>Tp_Link_wr886nv6_VxWorks_firmware_analysis</title>
      <link>https://chibataiki.github.io/posts/tp-link_wr886nv6_vxworks_firmware_analysis/</link>
      <pubDate>Wed, 27 May 2020 16:21:44 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/tp-link_wr886nv6_vxworks_firmware_analysis/</guid>
      <description>文件系统的提取 看第一篇参考文献的时候,尝试了下,找到了Tp_Link_wr886nv6的固件.
binwalk 扫描结果:
考虑到wr886nv6的内存空间, 这个解压大小2M左右的lzma压缩文件就可能比较有意思.
但是根据binwalk的两个文件初始位置进行分割会有点小问题,所以需要通过hex查看一下真实的有效数据是多大. 类似于这样: 真实数据到 0x00b6b2就结束了
000b6280: 500f 1765 1fee 46eb f9ca c213 2911 9afe P..e..F.....)... 000b6290: 3930 5afb 6f5c 6563 9742 d169 e313 e5ba 90Z.o\ec.B.i.... 000b62a0: 030b ba40 fb20 2705 c2c4 64d9 fe98 78de ...@. &amp;#39;...d...x. 000b62b0: be68 ffff ffff ffff ffff ffff ffff ffff .h.............. ... 000b6ff0: ffff ffff ffff ffff ffff ffff ffff ffff ................ 000b7000: 4d49 4e49 4653 0000 0000 0000 0000 0000 MINIFS.</description>
    </item>
    
    <item>
      <title>Polypyus_about</title>
      <link>https://chibataiki.github.io/posts/polypyus_about/</link>
      <pubDate>Thu, 21 May 2020 21:12:55 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/polypyus_about/</guid>
      <description>介绍 Polypyus通过对相似二进制文件中已知函数的提取,从而对二进制文件函数进行定位.不需要对二进制文件进行反汇编(). 基于二进制的方式也使得运行速度很快. 但是缺点是需要很多相同架构,相同编译选项的二进制文件.
Polypyus集成了一些现有的工具流程(Giidra, IDA, bindiff, Diaphora). 它可以将已经注释过的函数导入并从中学习,并将找出的函数导出到IDA中. Polypyus的门槛很高,因此只有在作者的实验中能够进行找到正确的匹配. 虽然不过强大但是 将匹配好的结果导入IDA中能够改善IDA的自动分析结果, 然后运行BinDiff
BinDiff: 二进制文件的比较工具,帮助快速找到反汇编代码的相同点和不同点.
解决的问题 IDA 6.8的自动分析比较激进,导致某些误报
DIA 7.2则略保守,导致一些漏报
BinDiff对于byte类型的函数,识别经常会出错. 但是Polupyus则对于byte类型函数识别的很精确. 推测BinDiff的出错原因是: 由于函数的缺失和误报导致生成的控制流图有所不同.有时这些函数已经被DIA所识别,但是IDA不会认为这些是代码或者函数.
Amnesia: ?
Amnesia在找到很多函数的同时也找到了很多的误报. 但是,很多函数初试时设置的栈桢可能是相似的. 因此Polypyus有个设置: 可以通过带有注释的二进制输入文件去学习通用的函数起始地址,并在其他二进制文件中用来识别函数,而不需要匹配函数名.不过该设置只适用于之前没有确认出函数的区域,这样可以避免冲突.
如何工作 Polypyus 收集带有注释的固件二进制文件,通过对共有的函数进行二进制模糊匹配.
支持带注释的文件:
 WICED Studio 的 patch.elf 文件,包含symbol definition most ARM compilers 生成的 .symdefs 文件 .csv 文件  输入的二进制文件的共性越多,polypyus的效果越好.
安装和使用 效果图:
问题在于: annotated binary 哪来!
 referer:
https://github.com/seemoo-lab/polypyus</description>
    </item>
    
    <item>
      <title>Linux Login</title>
      <link>https://chibataiki.github.io/posts/linux-users-groups/</link>
      <pubDate>Fri, 08 May 2020 19:39:41 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/linux-users-groups/</guid>
      <description>登陆机制相关文件:
  groups
  passwd
  shaodow
  /etc/group : user group file 用来分配用户组的文件权限?,通过:分为四个部分
 group name group password, x表示密码为空 group ID group包含的用户  Samples: root:\x:0: daemon:\x:1: adm:\x:4:root,syslog /etc/passwd: use names 分为7个部分,通过:分隔
  username
  密码的hash值,或者 x表示密码存储在/etc/shadow中,! 表示passwd被锁定,不能通过密码登陆,但是可以通过(ssh key)登陆, *表示不允许登陆
  uid
  gid
  注释
  用户的home目录
  (可选项) 用户的shell
  sample:
root:\x:0:0:Linux User,,,:/usr/share/ftp_server:/bin/sh ftp:*:95:95::/usr/share/ftp_server:/bin/sh sync:\x:4:65534:sync:/bin:/bin/sync root:!:0:0:root:/tmp:/bin/ash games:\x:5:60:games:/usr/games:/usr/sbin/nologin admin:$1$G555555$99999999999999/:500:500:admin:/tmp:/usr/bin/clish /etc/shadow : user password 只有特权用户可以访问,所以提高了密码的安全性,(这一点上很多嵌入式设备是直接将密码hash嵌入/etc/passwd中,所以不够安全)</description>
    </item>
    
    <item>
      <title>嵌入式设备文件系统分析工具</title>
      <link>https://chibataiki.github.io/posts/embedded_device_filesystem_analyze/</link>
      <pubDate>Tue, 07 Apr 2020 22:56:58 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/embedded_device_filesystem_analyze/</guid>
      <description>firmwalker https://github.com/craigz28/firmwalker
比较早的一个项目,bash编写,keywords patterns比较单薄
static-firmware-analysis https://github.com/secjey/static-firmware-analysis
灵感来自于firmwalker, 由python编写,比firmwalker多了一写匹配内容
trommel 参考了firmwalker,由python编写,相比来说最为完善
emba https://github.com/e-m-b-a/emba
简单看了下有挺多功能，比较有趣的是对 vulnerable function的检测，但是仅仅只是检测func的数量。</description>
    </item>
    
    <item>
      <title>A Large-Scale Analysis of the Security of Embedded Firmwares</title>
      <link>https://chibataiki.github.io/posts/a-large-scale-analysis-of-the-security-of-embedded-firmwares/</link>
      <pubDate>Tue, 07 Apr 2020 22:49:19 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/a-large-scale-analysis-of-the-security-of-embedded-firmwares/</guid>
      <description>Abstract first public, large-scale analysis of firmware images.
unpacked 32 thousand firmware images into 1.7 million individual files
show the main benefits of look- ing at many different devices at the same time
discovered a total of 38 previously unknown vulnerabilities in over 693 firmware images.
correlating similar files inside apparently unrelated firmware images
1. Introduction IoT devices:
  Common- Off-The-Shelf (COTS) devices : printers, mobile phones, home routers, and computer components and peripherals.</description>
    </item>
    
    <item>
      <title>shodan usage</title>
      <link>https://chibataiki.github.io/posts/shodan/</link>
      <pubDate>Sun, 29 Mar 2020 23:46:15 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/shodan/</guid>
      <description>过滤 include:
filtername:&amp;quot;value&amp;quot;
exclude: - or ! -filtername:&amp;quot;value&amp;quot;
筛选多值: , port: 22,23
Filter: hash hash值为shodan data域的hash
banner text为空的时候,hash值为0
hash:0 Filter: http.html_hash html的hash
很多header存在Date值,此时使用hash值进行过滤就存在 漏报,可以采用http.html的hash值进行过滤
http.html_hash:[hash value] 其他过滤规则类似,可以看raw数据进行筛选
favicon hash值的计算 import mmh3 import requests response = requests.get(&amp;#39;https://website/favicon.ico&amp;#39;) favicon = response.content.encode(&amp;#39;base64&amp;#39;) hash = mmh3.hash(favicon) print(hash)  CLI shodan提供cli接口
python3 -m pip install shodan shodan download [quary] shodan parse --fields ip_str,port,[fields] --separator , [download_file] shodan search --fields ip_str,port,[fields] [quary] ...  referer:
https://help.shodan.io/mastery/property-hashes</description>
    </item>
    
    <item>
      <title>Simple_key_validation</title>
      <link>https://chibataiki.github.io/posts/simple_key_validation/</link>
      <pubDate>Sat, 14 Mar 2020 22:46:32 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/simple_key_validation/</guid>
      <description>一种简单的密码加密机制:
#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; int main(int argc, char *argv[]){ if(argc==2){ printf(&amp;#34;Checking License: %s\n&amp;#34;,argv[1]); int sum=0; for(int i=0;i&amp;lt;strlen(argv[1]);i++){ sum += (int)argv[1][i]; } // printf(&amp;#34;%d\n&amp;#34;,sum); if( 1022 == sum){ printf(&amp;#34;Accessed!&amp;#34;); } else { printf(&amp;#34;Wrong!&amp;#34;); } }else { printf(&amp;#34;Usage: %s &amp;lt;key&amp;gt;\n&amp;#34;,argv[0]); } return 0; } 其中1022 是 &amp;ldquo;THIS IS THE KEY&amp;rdquo; 进行简单的ascii值求和的结果.
可以通过静态分析和逆向工程可以分析出加密机制.
key generator 根据逆向分析的算法生成注册码
import random def check_key(key): char_sum=0 for c in key: char_sum += ord(c) return char_sum chars=&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;#34; key = &amp;#34;&amp;#34; while True: key += random.</description>
    </item>
    
    <item>
      <title>Netgear-命令注入漏洞分析</title>
      <link>https://chibataiki.github.io/posts/netgear_command_injection_vule_analysis/</link>
      <pubDate>Wed, 04 Mar 2020 13:48:11 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/netgear_command_injection_vule_analysis/</guid>
      <description>netgear WNDR3700v4 存在命令注入漏洞,和认证绕过漏洞,相结合就可以未授权任意命令执行.
使用固件版本: V1.0.1.42
固件信息:
LZMA compressed data  Squashfs filesystem, little endian  ELF 32-bit MSB executable, MIPS, MIPS32 version 1 (SYSV)
使用LZMA进行压缩,文件系统为Squashfs, MIPS32,big-end,使用system V 接口
固件里一个/usr/sbin/net-cgi 程序里包含了很多功能,其中一个是 cmd_ping6(),如下:
反编译一下大概就是:
void cmd_ping6(char *target) { char cmd [132]; memset(cmd,0,0x80); sprintf(cmd,&amp;#34;ping6 -c 1 %s &amp;gt; /tmp/ping6_result 2&amp;gt;&amp;amp;1&amp;#34;,target); system(cmd); return; } 这里先将参数target格式化到命令字符串内,并存储在栈中 sprintf(target,&amp;quot;ping6 -c 1 %s &amp;gt; /tmp/ping6_result 2&amp;gt;&amp;amp;1&amp;quot;,target)
因为sprintf 不检验长度,所以存在缓冲区溢出
但是因为下面system函数直接调用了命令字符串,所以可以利用命令注入漏洞而不需要构造ROP链.
system()将参数给/bin/sh进行调用, 所以target设置为: ; evid_command &amp;amp;&amp;gt; /dev/null
那么执行完ping6 后,就会执行恶意命令.
那么就要看如何控制传入cmd_ping6 的参数.</description>
    </item>
    
    <item>
      <title>Burpsuite使用note</title>
      <link>https://chibataiki.github.io/posts/burpsuite-note/</link>
      <pubDate>Sun, 01 Mar 2020 22:58:31 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/burpsuite-note/</guid>
      <description>使用 match/replace proxy-&amp;gt;Options-&amp;gt; March and Replace
可以使用regex或者literal
然后HTTP history 页面下方会多出一栏 Auto-modifided request, 点进去就可以看到修改过后的 request
插件 Logger++ This extension can be used to log the requests and responses made by all Burp tools, and display them in a sortable table. It can also save the logged data in CSV format.
Requires Java version 7.
HTTP Request Smuggler This is an extension for Burp Suite designed to help you launch HTTP Request Smuggling attacks.</description>
    </item>
    
    <item>
      <title>MIPS汇编note</title>
      <link>https://chibataiki.github.io/posts/mips-assembly-note/</link>
      <pubDate>Sun, 01 Mar 2020 16:07:18 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/mips-assembly-note/</guid>
      <description>特性 MIPS和ARM 一样是RISC精简指令集
延迟槽 MIPS I 引入了延迟槽机制,以减少各种指令后流水线的阻塞.
MIPS II 取消了延迟槽机制
MIPS III 是MIPS II的一个后向兼容的扩展,并支持64位.
MIPS &amp;hellip;
指令格式 指令:32bits byte : 8bits word: 4bits, halfword: 2bits
MIPS架构中, 指令分为三种类型,R型、I型和J型.
寄存器    Register Number Conventional Name Usage     $0 $zero 硬编码为0   $1 $at 保留给汇编器   $2 - $3 $v0, $v1 保存函数返回值   $4 - $7 $a0 - $a3 存储参数   $8 - $15 $t0 - $t7 存储临时数据   $16 - $23 $s0 - $s7 保存寄存器,存储后面用到的数据   $24 - $25 $t8 - $t9 存储临时数据   $26 - $27 $k0 - $k1 为内核保留   $28 $gp 全局指针   $29 $sp 堆栈指针   $30 $fp 保存栈指针   $31 $ra 返回地址    算数指令 opt $dst, $src, [xx] : $dst = $src + [xx]</description>
    </item>
    
    <item>
      <title>macOS下IDA插件安装</title>
      <link>https://chibataiki.github.io/posts/ida-plugin-install/</link>
      <pubDate>Sun, 01 Mar 2020 14:30:18 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/ida-plugin-install/</guid>
      <description> IDAFuzzy : https://github.com/Ga-ryo/IDAFuzzy 在IDA中,对函数进行模糊搜索不是由友好,所以搜了一下,发现了IDAFuzzy  IDA pro 在macOS下安装的坑 和Windows中直接将插件拖到plugin目录不同, macOS的插件安装需要两步
 将ida_fuzzy.py 文件放到 plugins 目录下 将ida_fuzzy.py 所依赖的包放到 python 目录下  可以看到/Applications/IDA Pro 7.0/ida.app/Contents/MacOS中的目录结构:
chibataiki@chibataikis-MBP MacOS % tree -d -L 1 . . ├── cfg ├── dbgsrv ├── idc ├── ids ├── loaders ├── plugins ├── procs ├── python ├── sig └── til </description>
    </item>
    
    <item>
      <title>Dlink Backdoor 分析记录</title>
      <link>https://chibataiki.github.io/posts/dlink-backdoor-analysis/</link>
      <pubDate>Sun, 01 Mar 2020 12:38:39 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/dlink-backdoor-analysis/</guid>
      <description>受漏洞影响的是D-link 路由器的一些型号, 这些固件由D-link 子公司Alpha Networks公司开发.
只需要将浏览器User-Agent标志修改为：xmlset_roodkcableoj28840ybtide，再访问路由器IP地址，即可无需经过验证访问路由器的Web管理界面修改设备设置。
该后门在路由器的web服务中实现.
Craig Heffner 进行分析的时候,就首先将 /bin/webs 拖进IDA进行分析.
首先查看web server 的型号: thttpd-alphanetworks/2.23应该是thttpd的修改版本,而alphanetworks是D-link的子公司.
functions一栏里面很多alpha开头的函数,里面有个权限检查程序alpha_auth_check,可以分析一下.
通过交叉引用搜索发现 alpha_httpd_parse_request调用了alpha_auth_check :
alpha_httpd_parse_request调用部分:
loc_41A420: move $a0, $s2 la $t9, alpha_auth_check nop jalr $t9 ; alpha_auth_check nop lw $gp, 0x2830+var_2820($sp) li $v1, 0xFFFFFFFF beq $v0, $v1, loc_41A4B0 li $a0, 0xFFFFFFFF 分析一下参数: alpha_auth_check的传入参数$a0在$s2中,而 alpha_auth_check返回值存储在$v0中, 然后  $v0和$v1 (0xFFFFFFFF :-1)会进行比较, 相等就跳转到loc_41A4B0 结束函数.
 alpha_auth_check内:
存在strstr,strcmp 和以及一个明显的硬编码字符串
看一下strstr用法:
NAME strstr, strcasestr - locate a substring DESCRIPTION The strstr() function finds the first occurrence of the substring needle in the string haystack.</description>
    </item>
    
    <item>
      <title>MIPS/ARM 调试环境</title>
      <link>https://chibataiki.github.io/posts/dynamic-analysis-for-mips-arm/</link>
      <pubDate>Sat, 29 Feb 2020 10:47:10 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/dynamic-analysis-for-mips-arm/</guid>
      <description>环境
宿主机: ubuntu 18.04 x86_64 客户机: qemu运行的debian(wheey)
MIPS/ARM的程序调试方式:
 直接在宿主机上使用qemu 用户模式 在对应架构的debian虚拟机上运行,使用qemu-[mips/arm]-static的调试模式或者gdbserver都行  这里选择第二种
2.1. 客户机安装qemu-user-static
 apt-get install qemu-user-static  chroot . ./qemu-[arch]-static [-g port] [program]
2.2. 客户机安装 gdbserver
chroot . ./program gdbserver --attach pid 调试工具(宿主机):
 IDA debugger里设置一下就行 gdb-multiatch  set architecture mips target remote [ip]:[port] gdb可以使用pwngdb,pedagdb等插件
referer:</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://chibataiki.github.io/about/</link>
      <pubDate>Fri, 28 Feb 2020 22:59:34 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/about/</guid>
      <description>Discovering the world !</description>
    </item>
    
    <item>
      <title>MacOS 多版本java管理</title>
      <link>https://chibataiki.github.io/posts/macos-multui-java-management/</link>
      <pubDate>Fri, 28 Feb 2020 13:58:13 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/macos-multui-java-management/</guid>
      <description>之前安装 Burpsuite的时候,使用的是旧版本JDK1.8,这次ghida需要新版本
在linux中可以使用sudo update-alternatives --config java 进行java版本的选择
macOS下则使用jenv
brew tap homebrew/cask-versions brew install jenv 显示java 环境
/usr/libexec/java_home -V 结果类似于
13.0.2, x86_64:	&amp;#34;OpenJDK 13.0.2&amp;#34;	/Library/Java/JavaVirtualMachines/openjdk-13.0.2.jdk/Contents/Home 1.8.0_231, x86_64:	&amp;#34;Java SE 8&amp;#34;	/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home 添加 jdk ,路径为就是上面现实的路径
jenv add &amp;lt;jdk_path&amp;gt; 显示java版本信息:
jenv versions jenv version 设置java环境:
jenv global [jdk version] jenv local [jdk version] 有问题可以运行 jenv doctor
referer: https://gist.github.com/ntamvl/5f4dbaa8f68e6897b99682a395a44c2e</description>
    </item>
    
    <item>
      <title>常用的漏洞分析工具note</title>
      <link>https://chibataiki.github.io/posts/normal-binary-analysis-tools/</link>
      <pubDate>Fri, 28 Feb 2020 13:29:32 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/normal-binary-analysis-tools/</guid>
      <description>IDA hopper radare2 ghidra JEB-MIPS ollydbg gdb  pwngdb gef peda   burpsuite  linux command
  file
  readelf
  strings
  objdump
  hexdump
  strace
  ltrace
     binwalk
  checksec
  qemu
  dockerhub： https://hub.docker.com/u/waveburst
封装了QEMU system模式的arm,mips的docker镜像
    参考链接:
https://reverseengineering.stackexchange.com/questions/1817/is-there-any-disassembler-to-rival-ida-pro</description>
    </item>
    
    <item>
      <title>QEMU system mode emulation</title>
      <link>https://chibataiki.github.io/posts/qemu-system-mode-setting/</link>
      <pubDate>Thu, 27 Feb 2020 14:03:02 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/qemu-system-mode-setting/</guid>
      <description>主要是对MIPS/ARM架构的嵌入式设备进行仿真
系统仿真在大多数时候并不是一种很好的选择,因为不能保证完美的仿真硬件
0x00 QEMU 系统模式的仿真方式 系统模式下的引导需要提供内核,文件系统,文件系统使用binwalk等工具可以相对方便的获取, 但是内核比较麻烦. 这里大致有三种系统仿真方式
1.从设备中提取内核,并将提取出的文件系统制作成镜像,从镜像中启动. 这种方式最接近物理设备但是内核的提取不容易,是否能成功启动也另说.
2.使用一个同架构(MIPS,ARM)预编译的内核,使用固件提取的文件做成镜像进行启动. 相对容易,但是让仿真成功进行也比较麻烦.
3.使用一个同架构(MIPS,ARM)预编译的内核,以及预编译的系统镜像. 在系统成功启动后,将固件提取的文件系统拷贝到虚拟机中,使用 chroot 进行允许. 虽然不够贴近物理设备但是比较容易实现
这里选择第3种.
0x01 安装qemu sudo apt-get install qemu-system-mips qemu-system-mipsel qemu-system-arm -y (这里需要说一下的就是,直接使用apt 安装的qemub版本是2.x,但是QEMU官网的版本已经是4.x, 里面一些manual 手册内容也发生了变化, 但是还有一种说法就是,最好不要自己编译QEMU,因为可能对某些支持不是很好)
0x02下载预编译的kernel和系统文件镜像 下载链接: https://people.debian.org/~aurel32/qemu/
一些默认设置:
Root password: root
User account: user
User password: user
0x03启动qemu 最基础的命令:
qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append &amp;quot;root=/dev/sda1 console=ttyS0&amp;quot;  不想使用图形模式: -nographic
默认内存128 可以设置 -m 256M
0x04 网络配置 qemu支持设置usr,tap,bridge,l2tp,socket等类型的网络
(! net 参数不提倡,QEMU建议使用netdev)</description>
    </item>
    
    <item>
      <title>Netcore-igdmptd-后门漏洞分析</title>
      <link>https://chibataiki.github.io/posts/netcore_igdmptd_backdoor_analysis/</link>
      <pubDate>Thu, 27 Feb 2020 13:53:04 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/netcore_igdmptd_backdoor_analysis/</guid>
      <description>磊科路由器中内置了一个IGDMPTD的程序, 在外网上打开UDP端口53413 并进行监听. 后门采用硬编码的密码,允许攻击者在路由器上执行任意代码.
知道了这些之后,进行分析
仿真:
使用qemu 系统模式作为测试环境
固件: https://github.com/rapid7/metasploit-framework/files/267284/vuln_squashfs-root.tar.gz
scp -P 22 vuln_squashfs-root.tar.gz root@[target_ip]:/root tar xvf vuln_squashfs-root.tar.gz cd squashfs-root chroot . ./bin/igdmpt  可以看到端口已经打开 使用poc可以发现确实存在漏洞 create_server 函数中
bind:
 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);` addr =[family][ip][port] = 0xa5d00002
0xd05a = 53413 :端口号
0x00 = 0 : ip , INADDR_ANY =0 ,监听所有地址
0x02 = 2 :sa_family = 2,即SOCK_DGRAM ,表示UDP连接
这里ip设置为监听所有地址,所以设备会被暴露在公网上,很危险.
/* Socket types. */ #define SOCK_STREAM	1	/* stream (connection) socket	*/ #define SOCK_DGRAM	2	/* datagram (conn.</description>
    </item>
    
    <item>
      <title>Vim-Markdown-插件安装</title>
      <link>https://chibataiki.github.io/posts/vim-markdown-plugin-install/</link>
      <pubDate>Tue, 25 Feb 2020 00:23:10 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/vim-markdown-plugin-install/</guid>
      <description>环境： macOS catalina vim: macvim
设置vim初始化环境 mkdir ~/.vim mv .vimrc ~/.vim/vimrc  vim的初始化环境在macOS上最初是～/.vimrc, 因为需要安装插件新建了.vim文件夹，所以想将.vimrc文件放入.vim目录下,这个时候需要重命名.vimrc为vimrc. 可以在:h viminfo 中查看 安装插件 这里使用的是vim-plug :https://github.com/junegunn/vim-plug
需要将
&amp;quot; Plugins will be downloaded under the specified directory. call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; List ends here. Plugins become visible to Vim after this call. call plug#end()  添加到vimrc中,然后vim下执行:PlugInstall 就可以安装配置中的插件
安装markdown预览插件 https://github.com/iamcco/markdown-preview.nvim
在vimrc Plug区域添加
call plug#begin(&#39;~/.vim/plugged&#39;)  预览:
:MarkdownPreview :MarkdownPreviewStop  </description>
    </item>
    
    <item>
      <title>macOS soundflower audio input-output</title>
      <link>https://chibataiki.github.io/posts/macos_catalina_sound_redirection/</link>
      <pubDate>Sat, 22 Feb 2020 21:43:36 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/macos_catalina_sound_redirection/</guid>
      <description>因为有时候英文视频没有字幕，所以需要将视频的音频输出转为输入，这样可以借助一些翻译工具进行翻译。
工具： Soundflower
  安装 https://github.com/mattingalls/Soundflower/releases
  打开audio midi setup create Multi-Output Device，选中 Build-in Output 和SoundFlower(2ch), 此时，sound中的Output就多了Multi-Output Device 项
  chrome 浏览器下，translate.google.com 地址栏右侧microphone 设置可以选择 Internal-Microphone(Build-in)，以及Soundflower(2ch),此时 谷歌页面输入的声音就是此时电脑输出的声音
  referer: https://github.com/mattingalls/Soundflower/releases</description>
    </item>
    
    <item>
      <title>CNVD 2018 01084_D Link_DIR 645_reproduction</title>
      <link>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</link>
      <pubDate>Wed, 07 Mar 2018 16:36:34 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cnvd-2018-01084_d-link_dir-645_reproduction/</guid>
      <description>环境:
 x64 架构kali 2 + qemu user mode mipsel 架构 debian  过程:
使用IDA 打开 cgibin，main函数里第一步是把argc[0]和各个cgi模块名进行cmp操作， 然后根据 cmp结果进入各个模块。
可以使用 -0 argv0 强制将目标的 argv[0] 设置为 argv0
cgi 脚本通常通过环境变量/标准输入 获取输入，为了单独运行CGI脚本， 需要构造 相对应的请求参数。
 # REQUEST_METHOD # cgibin_parse_request 中 获取以下参数:  CONTENT_TYPE CONTENT_LENGTH REQUEST_URL
CONTENT_LENGTH 基于POST 数据的长度
可以看到请求为GET和POST请求都需要经过认证。
然后从环境变量中获取三个参数: EVENT，ACTION，SERVICE
QEMU可以通过 -E 设置环境变量 -0 设置参数
chroot . ./qemu-mipsel-static -0 &amp;#34;service.cgi&amp;#34; -E REQUEST_METHOD=&amp;#34;POST&amp;#34; - E REQUEST_URI=&amp;#34;service.cgi\?EVENT=CHECKFW%26ls%26&amp;#34; -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&amp;#34;application/x-www-form- urlencoded&amp;#34; -E HTTP_COOKIE=&amp;#34;uid=123456&amp;#34; -E REMOTE_ADDR=&amp;#34;127.</description>
    </item>
    
    <item>
      <title>CVE 2017 17562_GoAhead_RCE_reproduce</title>
      <link>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</link>
      <pubDate>Wed, 20 Dec 2017 17:36:42 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-17562_goahead_rce_reproduce/</guid>
      <description>编译运行 GoAhead
最新版本4.0.0 已修复 ， git checkout 切换漏洞版本
发现者现实shodan上数量：
2017-12-20 shodan：
漏洞位于 cgi.c cgiHandler
for new process, the function will start by allocating an array point for envp argument. then initials with key-value pairs taken from HTTP request parameters. Finally, lancgCgi function is called ,forks and execve the cgi script. 对于新进程，该函数将从为 envp 参数分配数组点开始。然后使用从 HTTP 请求参数获取的键值对开头的缩写。最后，调用 lancgCgi 函数，并执行 cgi 脚本。cgiHandleri 函数仅过滤 REMOTE_HOST 和 HTTP_AUTHORIZATION，所有其他参数均受信任和传递。因此，攻击者可以控制新 CGI 脚本的任意环境变量.
Patch : back to the version 4 ➜ goahead-git git:(4f83a6a3) ✗ git checkout tags/v4.</description>
    </item>
    
    <item>
      <title>CVE-2017-18046_Dasan_H640X_rce_reproduction</title>
      <link>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</link>
      <pubDate>Wed, 20 Dec 2017 13:29:11 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-18046_dasan_h640x_rce_reproduction/</guid>
      <description>Dasan Networks H640X Unauthenticated Remote Code Execution
  Affected version:
H640GR-02 H640GV-03 H640GW-02 H640RW-02 H645G
  Firmware:
2.76-9999 2.76-1101 2.67-1070 2.45-1045
  从某个ftp服务器中找到了部分影响的固件，下载了 G_ONU_N_2.45- 1045.01.H640GW.x 进行进一步的分析。
Step 1. 尝试使用 firmadyne进行初步仿真，失败。
[ 1.092000] init/1: potentially unexpected fatal signal 4 ... [ 1.096000] Kernel panic - not syncing: Attempted to kill init! Step 2. 使用qemu的user mode
 cpio-root chroot . ./qemu-mips-static -g 1234 ./bin/busybox -i -d 10 &amp;gt; debug.log gdb-multiarch 进行远程调试时， 发现其中指向0x7c65180a ，然而查看进程的maps ， 0x7c65180a地址是在范围之外的。 Step 3.</description>
    </item>
    
    <item>
      <title>CVE-2017-9675_D Link DIR 605L_DoS_analysis</title>
      <link>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</link>
      <pubDate>Wed, 29 Nov 2017 15:36:26 +0800</pubDate>
      
      <guid>https://chibataiki.github.io/posts/cve-2017-9675_d-link-dir-605l_dos_analysis/</guid>
      <description>Details
  Device: D-Link DIR-605L, Model B
  Vulnerable Firmware Versions: 2.08UIB01 and prior releases. Fixed in
2.08UIBETA01.
  Attack Vector: Unauthenticated HTTP GET request
  Impact: Denial of service
 CVE: CVE-2017-9675    Poc: curl http://192.168.1.1/common/
  选择固件版本: DIR-605L_REVB_FIRMWARE_206b01
根据固件中的boa 的字符串串信息可以获取到boa的版本为 0.94.14rc21
因为漏洞发⽣于 GET 请求，，那么猜测漏洞位于处理GET请求的函数，且为其 中处理⽬录的那些函数。且 末位为 / 分隔符，那么 修改或使⽤URL 字符串的那些函数可能存在漏洞。
漏洞成因:
execl(dirmaker, dirmaker, req-&amp;gt;pathname, req-&amp;gt;request_uri, (void *) NULL); 可能: dirmaker指针指向的⽂件在⽂件系统中并不存在 man execl 中 参数是 char * 类型的NULL指针，但是上⾯使用的是 void *类型的，</description>
    </item>
    
    
    
  </channel>
</rss>
